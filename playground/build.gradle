plugins {
    id "mrlonis-java-spring-boot"
}

dependencies {
    implementation project(":lib-mrlonis-types")
    implementation "com.h2database:h2"
    implementation "org.flywaydb:flyway-core:10.22.0"
    implementation "org.flywaydb:flyway-database-postgresql:10.22.0"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"

    // developmentOnly "org.springframework.boot:spring-boot-devtools"

    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation project(":lib-mrlonis-testing")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "com.h2database:h2"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation 'org.xmlunit:xmlunit-core:2.10.2'

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

def filesToExcludeFromCoverage = [
    "**/com/mrlonis/afkarena/config/**",
    "**/com/mrlonis/afkarena/domain/**"
]

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    if (systemProperties.get("spring.profiles.active") == "local") {
        dependsOn restartDocker
    }
    //    testLogging {
    //        showStandardStreams = true
    //    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
            exclude: filesToExcludeFromCoverage)
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
            exclude: filesToExcludeFromCoverage)
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }

        rule {
            enabled = false
            element = "CLASS"
            includes = ["org.gradle.*"]

            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = 0.3
            }
        }
    }

    mustRunAfter jacocoTestReport
}

check {
    dependsOn jacocoTestCoverageVerification
}

bootRun {
    if (System.properties.get("spring.profiles.active") == "local") {
        dependsOn restartDocker
    }
}

build {
    if (System.properties.get("spring.profiles.active") == "local") {
        dependsOn {
            jacocoTestReport
            restartDocker
        }
    } else {
        dependsOn jacocoTestReport
    }
}
