plugins {
    id "jacoco"
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "${sprintDependencyManagementVersion}"
    id "io.freefair.lombok" version "${lombokPluginVersion}"
    id "org.flywaydb.flyway" version "${flywayPluginVersion}"
}

dependencies {
    implementation project(':lib-mrlonis-types')
    implementation 'com.h2database:h2'
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "org.apache.ant:ant:${antVersion}"
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation "org.springframework.boot:spring-boot-starter-web"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation project(":lib-mrlonis-testing")
    testImplementation 'com.h2database:h2'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

def filesToExcludeFromCoverage = ["**/com/mrlonis/mythicheroes/config/**", "**/com/mrlonis/mythicheroes/domain/**"]

task restartDocker {
    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                workingDir = file('./')
                commandLine = ['cmd', '/C', 'docker compose up -d']
            } else {
                commandLine = ['docker', 'compose', 'up', '-d']
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport
    if (systemProperties.get("spring.profiles.active") == "local") {
        dependsOn restartDocker
    }
//    testLogging {
//        showStandardStreams = true
//    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: filesToExcludeFromCoverage)
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: filesToExcludeFromCoverage)
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.00
            }
        }
    }

    mustRunAfter jacocoTestReport
}

check {
    dependsOn jacocoTestCoverageVerification
}

bootRun {
    if (System.properties.get("spring.profiles.active") == "local") {
        dependsOn restartDocker
    }
}

build {
    if (System.properties.get("spring.profiles.active") == "local") {
        dependsOn {
            jacocoTestReport
            restartDocker
        }
    } else {
        dependsOn jacocoTestReport
    }
}

flyway {
    url = 'jdbc:postgresql://localhost:5110/'
    user = 'postgres'
    password = '123456'
}
